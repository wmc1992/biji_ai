{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u76ee\u5f55 sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd Batch Norm Layer Norm KL\u6563\u5ea6","title":"Home"},{"location":"#_1","text":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd Batch Norm Layer Norm KL\u6563\u5ea6","title":"\u76ee\u5f55"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/","text":"KL\u6563\u5ea6 \u4e00\u3001\u5b9a\u4e49 KL\u6563\u5ea6\u662f\u4e00\u79cd\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03 P \u548c Q \u7684\u5dee\u5f02\u7684\u65b9\u6cd5\uff1b \u5bf9\u4e8e\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u6765\u8bf4\uff0cKL\u6563\u5ea6\u516c\u5f0f\u4e3a\uff1a D_{KL}(p||q) = \\int_x p(x) \\log \\frac{p(x)}{q(x)} dx D_{KL}(p||q) = \\int_x p(x) \\log \\frac{p(x)}{q(x)} dx \u5bf9\u4e8e\u79bb\u6563\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u6765\u8bf4\uff0cKL\u6563\u5ea6\u516c\u5f0f\u4e3a\uff1a D_{KL}(p||q) = \\sum_x p(x) \\log \\frac{p(x)}{q(x)} D_{KL}(p||q) = \\sum_x p(x) \\log \\frac{p(x)}{q(x)} \u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4f7f\u7528\u7684\u90fd\u662f\u79bb\u6563\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\uff0c\u4e0b\u9762\u5c06\u4ec5\u8ba8\u8bba\u79bb\u6563\u60c5\u51b5\u4e0b\u7684KL\u6563\u5ea6\u3002 \u4e8c\u3001\u5728\u673a\u5668\u5b66\u4e60\u4e2dKL\u6563\u5ea6\u7684\u4f5c\u7528 \u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u5c31\u662f\uff1a\u5e0c\u671b\u6a21\u578b\u5b66\u5230\u7684\u5206\u5e03 p_{model} p_{model} \u4e0e\u8be5\u4efb\u52a1\u7684\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u4e00\u81f4\u3002 \u95ee\u9898\u5728\u4e8e\u8be5\u4efb\u52a1\u7684\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u662f\u65e0\u6cd5\u83b7\u53d6\u5230\u7684\uff0c\u80fd\u591f\u83b7\u53d6\u5230\u7684\u662f\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u8bad\u7ec3\u6570\u636e\u662f\u4ece\u603b\u4f53\u4e2d\u72ec\u7acb\u540c\u5206\u5e03\u91c7\u6837\u51fa\u6765\u7684\uff0c\u57fa\u4e8e\u8be5\u6761\u4ef6\u4e0b\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \u4e0e\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u662f\u4e00\u81f4\u7684\u3002\u8fd9\u6837\u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u5c31\u662f\uff1a\u5e0c\u671b\u6a21\u578b\u5b66\u5230\u7684\u5206\u5e03 P_{model} P_{model} \u4e0e\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \u4e00\u81f4\u3002 \u7136\u540e\u5269\u4f59\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u8bc4\u4f30\u4e24\u4e2a\u5206\u5e03\u662f\u5426\u4e00\u81f4\uff1f\u7b54\u6848\u662f\u4f7f\u7528KL\u6563\u5ea6\u8fdb\u884c\u8bc4\u4f30\u3002\u56e0\u4e3aKL\u6563\u5ea6\u7684\u5b9a\u4e49\u5c31\u662f\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03 p p \u548c q q \u7684\u5dee\u5f02\u3002 \u4e24\u4e2a\u5206\u5e03\u8d8a\u76f8\u8fd1\uff0cKL\u6563\u5ea6\u8d8a\u5c0f\uff1b\u4e24\u4e2a\u5206\u5e03\u7684\u5dee\u5f02\u8d8a\u5927\uff0cKL\u6563\u5ea6\u4e5f\u8d8a\u5927\uff1b\u5f53\u4e24\u4e2a\u5206\u5e03\u76f8\u540c\u65f6\uff0cKL\u6563\u5ea6\u4e3a0\u3002 \u4e09\u3001\u71b5\u3001KL\u6563\u5ea6\u3001\u4ea4\u53c9\u71b5 \u5148\u5bf9\u8fd9\u4e09\u4e2a\u6982\u5ff5\u7ed9\u51fa\u4e00\u4e2a\u901a\u4fd7\u4f46\u4e0d\u4e25\u8c28\u7684\u63cf\u8ff0\uff1a \u71b5\uff1a\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a\u4e8b\u4ef6 A \u7684\u81ea\u4fe1\u606f\u91cf\uff0c\u5373 A \u5305\u542b\u591a\u5c11\u4fe1\u606f\uff1b KL\u6563\u5ea6\uff1a\u53ef\u4ee5\u8868\u793a\u4ece\u4e8b\u4ef6 A \u7684\u89d2\u5ea6\u770b\uff0c\u4e8b\u4ef6 B \u6709\u591a\u5927\u7684\u4e0d\u540c\uff1b \u4ea4\u53c9\u71b5\uff1a\u53ef\u4ee5\u8868\u793a\u4ece\u4e8b\u4ef6 A \u7684\u89d2\u5ea6\u770b\uff0c\u5982\u4f55\u63cf\u8ff0\u4e8b\u4ef6 B\uff1b \u4e0b\u9762\u4f7f\u7528\u6570\u636e\u516c\u793a\u7ed9\u51fa\u8fd9\u4e09\u4e2a\u6982\u5ff5\u7684\u4e25\u8c28\u7684\u8868\u793a\uff1a \u71b5\uff1a H(p) = - \\sum_i p_i \\log p_i H(p) = - \\sum_i p_i \\log p_i KL\u6563\u5ea6\uff1a D_{KL}(p||q) = \\sum_i p_i \\log \\frac{p_i}{q_i} = \\sum_i p_i \\log p_i - \\sum_i p_i \\log q_i D_{KL}(p||q) = \\sum_i p_i \\log \\frac{p_i}{q_i} = \\sum_i p_i \\log p_i - \\sum_i p_i \\log q_i \u4ea4\u53c9\u71b5\uff1a H(p||q) = - \\sum_i p_i \\log q_i H(p||q) = - \\sum_i p_i \\log q_i \u6ce8\u610f\u71b5\u548c\u4ea4\u53c9\u71b5\u516c\u5f0f\u4e2d\u90fd\u5e26\u6709\u4e00\u4e2a\u8d1f\u53f7\uff0c\u800cKL\u6563\u5ea6\u7684\u516c\u5f0f\u4e2d\u5e76\u6ca1\u6709\u8d1f\u53f7\uff1b \u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u7684KL\u6563\u5ea6\u7684\u516c\u5f0f\uff0c\u5de6\u4fa7\u9879 \\sum_i p_i \\log p_i \\sum_i p_i \\log p_i \u5f88\u50cf\u662f\u71b5\u7684\u516c\u5f0f\uff0c\u5373 -H(p) -H(p) \uff1b\u53f3\u4fa7\u9879 -\\sum_i p_i \\log q_i -\\sum_i p_i \\log q_i \u5c31\u662f\u4ea4\u53c9\u71b5\u7684\u516c\u5f0f\uff0c\u5373 H(p||q) H(p||q) \uff1b\u6240\u4ee5\u4f1a\u63a8\u5bfc\u51fa\u5982\u4e0b\u516c\u5f0f\uff1a D_{KL}(p||q) = H(p||q) - H(p) D_{KL}(p||q) = H(p||q) - H(p) \u5373\u4ece\u516c\u5f0f\u4e0a\u6765\u8bf4\uff1aKL\u6563\u5ea6\u7b49\u4e8e\u4ea4\u53c9\u71b5\u51cf\u71b5\u3002 \u56db\u3001\u673a\u5668\u5b66\u4e60\u4e2d\u4e3a\u4ec0\u4e48\u591a\u7528\u4ea4\u53c9\u71b5\u800c\u4e0d\u662fKL\u6563\u5ea6 \u5728\u7b2c\u4e8c\u90e8\u5206\u7684\u63cf\u8ff0\u4e2d\u5df2\u7ecf\u5f88\u6e05\u6670\u7684\u63d0\u5230\uff1a\u673a\u5668\u5b66\u4e60\u5c31\u662f\u5c06\u6a21\u578b\u5206\u5e03 P_{model} P_{model} \u5b66\u5230\u4e0e\u8bad\u7ec3\u96c6\u5206\u5e03 P_{train} P_{train} \u4e00\u81f4\u7684\u8fc7\u7a0b\u3002\u800c\u8861\u91cf\u4e24\u4e2a\u5206\u5e03\u662f\u5426\u4e00\u81f4\u6700\u76f4\u63a5\u7684\u8bc4\u4f30\u65b9\u5f0f\u5c31\u662fKL\u6563\u5ea6\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u5e38\u7528\u4ea4\u53c9\u71b5\u800c\u4e0d\u662fKL\u6563\u5ea6\uff1f \u5728\u7b2c\u4e09\u90e8\u5206\u7684\u6700\u540e\u63a8\u5bfc\u51fa\u4e86\u4e00\u4e2a\u516c\u5f0f\uff0c\u518d\u6b21\u8bb0\u5f55\u5982\u4e0b\uff1a \\begin{equation} \\begin{split} D_{KL}(p||q) &= \\sum_i p_i \\log \\frac{p_i}{q_i} \\\\ &= \\big[ -\\sum_i p_i \\log q_i \\big] - \\big[ -\\sum_i p_i \\log p_i \\big] \\\\ &= H(p||q) - H(p) \\end{split} \\end{equation} \\begin{equation} \\begin{split} D_{KL}(p||q) &= \\sum_i p_i \\log \\frac{p_i}{q_i} \\\\ &= \\big[ -\\sum_i p_i \\log q_i \\big] - \\big[ -\\sum_i p_i \\log p_i \\big] \\\\ &= H(p||q) - H(p) \\end{split} \\end{equation} \u5c06\u4e0a\u8ff0\u516c\u5f0f\u653e\u5230\u673a\u5668\u5b66\u4e60\u8fd9\u4e2a\u5177\u4f53\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u516c\u5f0f\u4e2d\u7684\u6982\u7387\u5206\u5e03 q q \u5c31\u662f\u9700\u8981\u5b66\u4e60\u624d\u80fd\u5f97\u5230\u7684\u6a21\u578b\u5206\u5e03 P_{model} P_{model} \uff0c\u516c\u5f0f\u4e2d\u7684\u6982\u7387\u5206\u5e03 p p \u5c31\u662f\u8bad\u7ec3\u96c6\u5206\u5e03 P_{train} P_{train} \u3002 \u6211\u4eec\u77e5\u9053\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u8bad\u7ec3\u96c6\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u8bad\u7ec3\u96c6\u7684\u71b5 H(p) H(p) \u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u968f\u7740\u6a21\u578b\u7684\u4f18\u5316\u8fc7\u7a0b\u800c\u53d8\u5316\u3002\u5373\u5728\u673a\u5668\u5b66\u4e60\u8fd9\u4e2a\u5e94\u7528\u573a\u666f\u4e0b H(p) H(p) \u662f\u5e38\u6570\u3002\u6b64\u65f6\u4f7f\u7528 D_{KL}(p||q) D_{KL}(p||q) \u5bf9\u6a21\u578b\u4f18\u5316\u4e0e\u4f7f\u7528 H(p||q) H(p||q) \u5bf9\u6a21\u578b\u4f18\u5316\u662f\u7b49\u4ef7\u7684\u3002\u7531\u4e8e\u4f7f\u7528\u4ea4\u53c9\u71b5 H(p||q) H(p||q) \u65f6\u8fd8\u80fd\u5c11\u8ba1\u7b97\u4e00\u9879\uff0c\u8282\u7701\u8ba1\u7b97\u8d44\u6e90\uff0c\u6240\u4ee5\u673a\u5668\u5b66\u4e60\u4e2d\u4e00\u822c\u8f83\u591a\u60c5\u51b5\u4f7f\u7528\u4ea4\u53c9\u71b5\u3002 \u4e94\u3001KL\u6563\u5ea6\u7684\u6027\u8d28 \u6700\u540e\u8bb0\u5f55\u4e00\u4e0bKL\u6563\u5ea6\u7684\u4e24\u4e2a\u6570\u5b66\u6027\u8d28\uff1a \u6b63\u5b9a\u6027 \uff1a D_{KL}(p||q) \\geqslant 0 D_{KL}(p||q) \\geqslant 0 \u4e0d\u5bf9\u79f0\u6027 \uff1a D_{KL}(p||q) != D_{KL}(q||p) D_{KL}(p||q) != D_{KL}(q||p) \u7531\u4e8eKL\u6563\u5ea6\u4e0d\u5177\u6709 \u5bf9\u79f0\u6027 \uff0c\u6240\u4ee5KL\u6563\u5ea6\u4e0d\u662f\u4e00\u79cd\u8ddd\u79bb\uff08\u5ea6\u91cf\uff09\u3002 \u4e00\u822c\u6765\u8bf4\u8ddd\u79bb\uff08\u5ea6\u91cf\uff09\u8981\u6ee1\u8db33\u4e2a\u6761\u4ef6\uff1a\u6b63\u5b9a\u6027\u3001\u5bf9\u79f0\u6027\u3001\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff1b Reference https://blog.csdn.net/qq_40406773/article/details/80630280 https://zhuanlan.zhihu.com/p/39682125 https://hsinjhao.github.io/2019/05/22/KL-DivergenceIntroduction/ https://www.zhihu.com/question/336677048 https://www.zhihu.com/question/65288314/answer/244557337","title":"KL\u6563\u5ea6"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#kl","text":"","title":"KL\u6563\u5ea6"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#_1","text":"KL\u6563\u5ea6\u662f\u4e00\u79cd\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03 P \u548c Q \u7684\u5dee\u5f02\u7684\u65b9\u6cd5\uff1b \u5bf9\u4e8e\u8fde\u7eed\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u6765\u8bf4\uff0cKL\u6563\u5ea6\u516c\u5f0f\u4e3a\uff1a D_{KL}(p||q) = \\int_x p(x) \\log \\frac{p(x)}{q(x)} dx D_{KL}(p||q) = \\int_x p(x) \\log \\frac{p(x)}{q(x)} dx \u5bf9\u4e8e\u79bb\u6563\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u6765\u8bf4\uff0cKL\u6563\u5ea6\u516c\u5f0f\u4e3a\uff1a D_{KL}(p||q) = \\sum_x p(x) \\log \\frac{p(x)}{q(x)} D_{KL}(p||q) = \\sum_x p(x) \\log \\frac{p(x)}{q(x)} \u673a\u5668\u5b66\u4e60\u548c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4f7f\u7528\u7684\u90fd\u662f\u79bb\u6563\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\uff0c\u4e0b\u9762\u5c06\u4ec5\u8ba8\u8bba\u79bb\u6563\u60c5\u51b5\u4e0b\u7684KL\u6563\u5ea6\u3002","title":"\u4e00\u3001\u5b9a\u4e49"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#kl_1","text":"\u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u5c31\u662f\uff1a\u5e0c\u671b\u6a21\u578b\u5b66\u5230\u7684\u5206\u5e03 p_{model} p_{model} \u4e0e\u8be5\u4efb\u52a1\u7684\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u4e00\u81f4\u3002 \u95ee\u9898\u5728\u4e8e\u8be5\u4efb\u52a1\u7684\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u662f\u65e0\u6cd5\u83b7\u53d6\u5230\u7684\uff0c\u80fd\u591f\u83b7\u53d6\u5230\u7684\u662f\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \uff0c\u6211\u4eec\u4e00\u822c\u8ba4\u4e3a\u8bad\u7ec3\u6570\u636e\u662f\u4ece\u603b\u4f53\u4e2d\u72ec\u7acb\u540c\u5206\u5e03\u91c7\u6837\u51fa\u6765\u7684\uff0c\u57fa\u4e8e\u8be5\u6761\u4ef6\u4e0b\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \u4e0e\u771f\u5b9e\u5206\u5e03 P_{real} P_{real} \u662f\u4e00\u81f4\u7684\u3002\u8fd9\u6837\u673a\u5668\u5b66\u4e60\u7684\u76ee\u6807\u5c31\u662f\uff1a\u5e0c\u671b\u6a21\u578b\u5b66\u5230\u7684\u5206\u5e03 P_{model} P_{model} \u4e0e\u8bad\u7ec3\u96c6\u7684\u5206\u5e03 P_{train} P_{train} \u4e00\u81f4\u3002 \u7136\u540e\u5269\u4f59\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u8bc4\u4f30\u4e24\u4e2a\u5206\u5e03\u662f\u5426\u4e00\u81f4\uff1f\u7b54\u6848\u662f\u4f7f\u7528KL\u6563\u5ea6\u8fdb\u884c\u8bc4\u4f30\u3002\u56e0\u4e3aKL\u6563\u5ea6\u7684\u5b9a\u4e49\u5c31\u662f\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03 p p \u548c q q \u7684\u5dee\u5f02\u3002 \u4e24\u4e2a\u5206\u5e03\u8d8a\u76f8\u8fd1\uff0cKL\u6563\u5ea6\u8d8a\u5c0f\uff1b\u4e24\u4e2a\u5206\u5e03\u7684\u5dee\u5f02\u8d8a\u5927\uff0cKL\u6563\u5ea6\u4e5f\u8d8a\u5927\uff1b\u5f53\u4e24\u4e2a\u5206\u5e03\u76f8\u540c\u65f6\uff0cKL\u6563\u5ea6\u4e3a0\u3002","title":"\u4e8c\u3001\u5728\u673a\u5668\u5b66\u4e60\u4e2dKL\u6563\u5ea6\u7684\u4f5c\u7528"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#kl_2","text":"\u5148\u5bf9\u8fd9\u4e09\u4e2a\u6982\u5ff5\u7ed9\u51fa\u4e00\u4e2a\u901a\u4fd7\u4f46\u4e0d\u4e25\u8c28\u7684\u63cf\u8ff0\uff1a \u71b5\uff1a\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a\u4e8b\u4ef6 A \u7684\u81ea\u4fe1\u606f\u91cf\uff0c\u5373 A \u5305\u542b\u591a\u5c11\u4fe1\u606f\uff1b KL\u6563\u5ea6\uff1a\u53ef\u4ee5\u8868\u793a\u4ece\u4e8b\u4ef6 A \u7684\u89d2\u5ea6\u770b\uff0c\u4e8b\u4ef6 B \u6709\u591a\u5927\u7684\u4e0d\u540c\uff1b \u4ea4\u53c9\u71b5\uff1a\u53ef\u4ee5\u8868\u793a\u4ece\u4e8b\u4ef6 A \u7684\u89d2\u5ea6\u770b\uff0c\u5982\u4f55\u63cf\u8ff0\u4e8b\u4ef6 B\uff1b \u4e0b\u9762\u4f7f\u7528\u6570\u636e\u516c\u793a\u7ed9\u51fa\u8fd9\u4e09\u4e2a\u6982\u5ff5\u7684\u4e25\u8c28\u7684\u8868\u793a\uff1a \u71b5\uff1a H(p) = - \\sum_i p_i \\log p_i H(p) = - \\sum_i p_i \\log p_i KL\u6563\u5ea6\uff1a D_{KL}(p||q) = \\sum_i p_i \\log \\frac{p_i}{q_i} = \\sum_i p_i \\log p_i - \\sum_i p_i \\log q_i D_{KL}(p||q) = \\sum_i p_i \\log \\frac{p_i}{q_i} = \\sum_i p_i \\log p_i - \\sum_i p_i \\log q_i \u4ea4\u53c9\u71b5\uff1a H(p||q) = - \\sum_i p_i \\log q_i H(p||q) = - \\sum_i p_i \\log q_i \u6ce8\u610f\u71b5\u548c\u4ea4\u53c9\u71b5\u516c\u5f0f\u4e2d\u90fd\u5e26\u6709\u4e00\u4e2a\u8d1f\u53f7\uff0c\u800cKL\u6563\u5ea6\u7684\u516c\u5f0f\u4e2d\u5e76\u6ca1\u6709\u8d1f\u53f7\uff1b \u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u7684KL\u6563\u5ea6\u7684\u516c\u5f0f\uff0c\u5de6\u4fa7\u9879 \\sum_i p_i \\log p_i \\sum_i p_i \\log p_i \u5f88\u50cf\u662f\u71b5\u7684\u516c\u5f0f\uff0c\u5373 -H(p) -H(p) \uff1b\u53f3\u4fa7\u9879 -\\sum_i p_i \\log q_i -\\sum_i p_i \\log q_i \u5c31\u662f\u4ea4\u53c9\u71b5\u7684\u516c\u5f0f\uff0c\u5373 H(p||q) H(p||q) \uff1b\u6240\u4ee5\u4f1a\u63a8\u5bfc\u51fa\u5982\u4e0b\u516c\u5f0f\uff1a D_{KL}(p||q) = H(p||q) - H(p) D_{KL}(p||q) = H(p||q) - H(p) \u5373\u4ece\u516c\u5f0f\u4e0a\u6765\u8bf4\uff1aKL\u6563\u5ea6\u7b49\u4e8e\u4ea4\u53c9\u71b5\u51cf\u71b5\u3002","title":"\u4e09\u3001\u71b5\u3001KL\u6563\u5ea6\u3001\u4ea4\u53c9\u71b5"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#kl_3","text":"\u5728\u7b2c\u4e8c\u90e8\u5206\u7684\u63cf\u8ff0\u4e2d\u5df2\u7ecf\u5f88\u6e05\u6670\u7684\u63d0\u5230\uff1a\u673a\u5668\u5b66\u4e60\u5c31\u662f\u5c06\u6a21\u578b\u5206\u5e03 P_{model} P_{model} \u5b66\u5230\u4e0e\u8bad\u7ec3\u96c6\u5206\u5e03 P_{train} P_{train} \u4e00\u81f4\u7684\u8fc7\u7a0b\u3002\u800c\u8861\u91cf\u4e24\u4e2a\u5206\u5e03\u662f\u5426\u4e00\u81f4\u6700\u76f4\u63a5\u7684\u8bc4\u4f30\u65b9\u5f0f\u5c31\u662fKL\u6563\u5ea6\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u673a\u5668\u5b66\u4e60\u4e2d\u5e38\u7528\u4ea4\u53c9\u71b5\u800c\u4e0d\u662fKL\u6563\u5ea6\uff1f \u5728\u7b2c\u4e09\u90e8\u5206\u7684\u6700\u540e\u63a8\u5bfc\u51fa\u4e86\u4e00\u4e2a\u516c\u5f0f\uff0c\u518d\u6b21\u8bb0\u5f55\u5982\u4e0b\uff1a \\begin{equation} \\begin{split} D_{KL}(p||q) &= \\sum_i p_i \\log \\frac{p_i}{q_i} \\\\ &= \\big[ -\\sum_i p_i \\log q_i \\big] - \\big[ -\\sum_i p_i \\log p_i \\big] \\\\ &= H(p||q) - H(p) \\end{split} \\end{equation} \\begin{equation} \\begin{split} D_{KL}(p||q) &= \\sum_i p_i \\log \\frac{p_i}{q_i} \\\\ &= \\big[ -\\sum_i p_i \\log q_i \\big] - \\big[ -\\sum_i p_i \\log p_i \\big] \\\\ &= H(p||q) - H(p) \\end{split} \\end{equation} \u5c06\u4e0a\u8ff0\u516c\u5f0f\u653e\u5230\u673a\u5668\u5b66\u4e60\u8fd9\u4e2a\u5177\u4f53\u5e94\u7528\u573a\u666f\u4e2d\uff0c\u516c\u5f0f\u4e2d\u7684\u6982\u7387\u5206\u5e03 q q \u5c31\u662f\u9700\u8981\u5b66\u4e60\u624d\u80fd\u5f97\u5230\u7684\u6a21\u578b\u5206\u5e03 P_{model} P_{model} \uff0c\u516c\u5f0f\u4e2d\u7684\u6982\u7387\u5206\u5e03 p p \u5c31\u662f\u8bad\u7ec3\u96c6\u5206\u5e03 P_{train} P_{train} \u3002 \u6211\u4eec\u77e5\u9053\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u8bad\u7ec3\u96c6\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u8bad\u7ec3\u96c6\u7684\u71b5 H(p) H(p) \u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u968f\u7740\u6a21\u578b\u7684\u4f18\u5316\u8fc7\u7a0b\u800c\u53d8\u5316\u3002\u5373\u5728\u673a\u5668\u5b66\u4e60\u8fd9\u4e2a\u5e94\u7528\u573a\u666f\u4e0b H(p) H(p) \u662f\u5e38\u6570\u3002\u6b64\u65f6\u4f7f\u7528 D_{KL}(p||q) D_{KL}(p||q) \u5bf9\u6a21\u578b\u4f18\u5316\u4e0e\u4f7f\u7528 H(p||q) H(p||q) \u5bf9\u6a21\u578b\u4f18\u5316\u662f\u7b49\u4ef7\u7684\u3002\u7531\u4e8e\u4f7f\u7528\u4ea4\u53c9\u71b5 H(p||q) H(p||q) \u65f6\u8fd8\u80fd\u5c11\u8ba1\u7b97\u4e00\u9879\uff0c\u8282\u7701\u8ba1\u7b97\u8d44\u6e90\uff0c\u6240\u4ee5\u673a\u5668\u5b66\u4e60\u4e2d\u4e00\u822c\u8f83\u591a\u60c5\u51b5\u4f7f\u7528\u4ea4\u53c9\u71b5\u3002","title":"\u56db\u3001\u673a\u5668\u5b66\u4e60\u4e2d\u4e3a\u4ec0\u4e48\u591a\u7528\u4ea4\u53c9\u71b5\u800c\u4e0d\u662fKL\u6563\u5ea6"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#kl_4","text":"\u6700\u540e\u8bb0\u5f55\u4e00\u4e0bKL\u6563\u5ea6\u7684\u4e24\u4e2a\u6570\u5b66\u6027\u8d28\uff1a \u6b63\u5b9a\u6027 \uff1a D_{KL}(p||q) \\geqslant 0 D_{KL}(p||q) \\geqslant 0 \u4e0d\u5bf9\u79f0\u6027 \uff1a D_{KL}(p||q) != D_{KL}(q||p) D_{KL}(p||q) != D_{KL}(q||p) \u7531\u4e8eKL\u6563\u5ea6\u4e0d\u5177\u6709 \u5bf9\u79f0\u6027 \uff0c\u6240\u4ee5KL\u6563\u5ea6\u4e0d\u662f\u4e00\u79cd\u8ddd\u79bb\uff08\u5ea6\u91cf\uff09\u3002 \u4e00\u822c\u6765\u8bf4\u8ddd\u79bb\uff08\u5ea6\u91cf\uff09\u8981\u6ee1\u8db33\u4e2a\u6761\u4ef6\uff1a\u6b63\u5b9a\u6027\u3001\u5bf9\u79f0\u6027\u3001\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff1b","title":"\u4e94\u3001KL\u6563\u5ea6\u7684\u6027\u8d28"},{"location":"KL%E6%95%A3%E5%BA%A6_markdown/#reference","text":"https://blog.csdn.net/qq_40406773/article/details/80630280 https://zhuanlan.zhihu.com/p/39682125 https://hsinjhao.github.io/2019/05/22/KL-DivergenceIntroduction/ https://www.zhihu.com/question/336677048 https://www.zhihu.com/question/65288314/answer/244557337","title":"Reference"},{"location":"batch_normalize_markdown/","text":"Batch Normalize 1\u3001BN\u5177\u4f53\u7684\u64cd\u4f5c\u6b65\u9aa4 \u5176\u64cd\u4f5c\u6b65\u9aa4\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u6bcf\u4e2a mini-batch \u5185\u7684\u7279\u5f81\u901a\u8fc7\u51cf\u53bb \\mu \\mu \u9664\u4ee5 \\sigma \\sigma \u7684\u65b9\u5f0f\u5f52\u4e00\u5316\u5230\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff1b \u5bf9\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u9aa4\u7684\u8f93\u51fa\u518d\u8fc7\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff1b \u4ee5\u4e0a\u662f\u6587\u5b57\u5f62\u5f0f\u7684\u8bf4\u660e\uff0c\u4e0b\u9762\u662f\u516c\u5f0f\u5f62\u5f0f\u3002 \u8f93\u5165 \uff1a \u4e00\u4e2a mini-batch \u5185\u7684\u6570\u636e\u4e3a \\{x_1, x_2, ..., x_m \\} \\{x_1, x_2, ..., x_m \\} \uff0c\u5176\u4e2d m m \u662f mini-batch-size\uff1b \u8bb0 x_i^{(j)} x_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\uff1b \\gamma \\gamma \u548c \\beta \\beta \u4e3a\u53ef\u5b66\u4e60\u7684\u53c2\u6570\uff1b \u8f93\u51fa \uff1a y_i^{(j)} y_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7BN\u540e\u7684\u7ed3\u679c\u3002 \u516c\u5f0f \uff1a \u8be5 mini-batch \u4e2d\u7b2cj\u4e2a\u7279\u5f81\u7684\u5747\u503c\uff1a \\mu_{B}^{(j)} = \\frac{1}{m} \\sum_{i=1}^{m} x_{i}^{(j)} \\mu_{B}^{(j)} = \\frac{1}{m} \\sum_{i=1}^{m} x_{i}^{(j)} \u8be5 mini-batch \u4e2d\u7b2cj\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\uff1a \\sigma_{B}^{(j)2} = \\frac{1}{m} \\sum_{i=1}^{m} (x_i^{(j)} - \\mu_B^{(j)})^2 \\sigma_{B}^{(j)2} = \\frac{1}{m} \\sum_{i=1}^{m} (x_i^{(j)} - \\mu_B^{(j)})^2 \u51cf\u53bb\u5747\u503c\uff0c\u9664\u4e0a\u6807\u51c6\u5316\uff0c \\epsilon \\epsilon \u7528\u4e8e\u907f\u514d\u9664\u6570\u4e3a0\uff1a \\hat{x}_i^{(j)} = \\frac{x_i^{(j)} - \\mu_B^{(j)}}{\\sqrt{\\sigma_B^{(j)2} + \\epsilon}} \\hat{x}_i^{(j)} = \\frac{x_i^{(j)} - \\mu_B^{(j)}}{\\sqrt{\\sigma_B^{(j)2} + \\epsilon}} \u7ecf\u8fc7BN\u540e\u7684\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\uff1a y_i^{(j)} = \\gamma \\hat{x_i^{(j)}} + \\beta y_i^{(j)} = \\gamma \\hat{x_i^{(j)}} + \\beta 2\u3001BN\u662f\u4e3a\u4e86\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 2.1 ICS\u95ee\u9898\uff08Internal Covariate Shift\uff09 \u5728\u6df1\u5ea6\u6a21\u578b\u4e2d\uff0c\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\uff0c\u7f51\u7edc\u4e2d\u7684\u53c2\u6570\u968f\u7740\u68af\u5ea6\u4e0b\u964d\u5728\u4e0d\u65ad\u66f4\u65b0\u3002\u4e00\u65b9\u9762\uff0c\u5f53\u5e95\u5c42\u7f51\u7edc\u4e2d\u53c2\u6570\u53d1\u751f\u5fae\u5f31\u53d8\u5316\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e00\u5c42\u4e2d\u7684\u7ebf\u6027\u53d8\u6362\u4e0e\u975e\u7ebf\u6027\u6fc0\u6d3b\uff0c\u8fd9\u4e9b\u5fae\u5f31\u53d8\u5316\u968f\u7740\u7f51\u7edc\u5c42\u6570\u7684\u52a0\u6df1\u800c\u88ab\u52a0\u5927\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u53c2\u6570\u7684\u53d8\u5316\u5bfc\u81f4\u6bcf\u4e00\u5c42\u7684\u8f93\u5165\u5206\u5e03\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fdb\u800c\u4e0a\u5c42\u7684\u7f51\u7edc\u9700\u8981\u4e0d\u505c\u7684\u53bb\u9002\u5e94\u8fd9\u4e9b\u5206\u5e03\u7684\u53d8\u5316\uff0c\u4f7f\u7684\u6a21\u578b\u8bad\u7ec3\u53d8\u5f97\u56f0\u96be\u3002\u8fd9\u4e00\u73b0\u8c61\u5c31\u662fICS\u95ee\u9898\u3002 2.2 ICS\u4f1a\u5bfc\u81f4\u7684\u95ee\u9898 \u7531\u4e8e\u4e0b\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u6570\u636e\u5206\u5e03\u5728\u4e0d\u65ad\u53d8\u5316\uff0c\u4e0a\u5c42\u7f51\u7edc\u5c31\u9700\u8981\u4e0d\u505c\u8c03\u6574\u6765\u9002\u5e94\u8fd9\u4e2a\u53d8\u5316\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5b66\u4e60\u901f\u5ea6\u7684\u964d\u4f4e\uff1b \u968f\u7740\u6a21\u578b\u8bad\u7ec3\u7684\u8fdb\u884c\uff0c\u6a21\u578b\u7684\u53c2\u6570 W W \u4f1a\u53d8\u5927\uff0c\u5219\u6bcf\u5c42\u7684\u8f93\u51fa \\text{Output} = W * \\text{Input} + b \\text{Output} = W * \\text{Input} + b \u4e5f\u4f1a\u53d8\u5927\uff0c\u5f53\u4f7f\u7528\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u65f6\uff0c\u5c31\u5bb9\u6613\u9677\u5165\u68af\u5ea6\u9971\u548c\u533a\uff0c\u6b64\u65f6\u7684\u68af\u5ea6\u5c31\u4f1a\u5f88\u5c0f\u751a\u81f3\u4e8e\u63a5\u8fd10. 3\u3001\u5728BN\u51fa\u73b0\u524d\uff0c\u662f\u5982\u4f55\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684 3.1 \u767d\u5316\u64cd\u4f5c ICS\u4ea7\u751f\u7684\u539f\u56e0\u662f\u7531\u4e8e\u53c2\u6570\u7684\u66f4\u65b0\u5e26\u6765\u7684\u7f51\u7edc\u4e2d\u6bcf\u4e00\u5c42\u8f93\u5165\u503c\u5206\u5e03\u7684\u6539\u53d8\uff0c\u5e76\u4e14\u968f\u7740\u7f51\u7edc\u7684\u52a0\u6df1\u800c\u8d8a\u4e25\u91cd\u3002\u7f13\u89e3ICS\u6700\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u56fa\u5b9a\u6bcf\u5c42\u7f51\u7edc\u8f93\u5165\u503c\u7684\u5206\u5e03\u6765\u7f13\u89e3ICS\u95ee\u9898\u3002 \u767d\u5316\u64cd\u4f5c\uff1a\u7ecf\u8fc7\u53d8\u5316\u64cd\u4f5c\u4e4b\u540e\u4f1a\u5177\u6709\u5982\u4e0b\u4e24\u4e2a\u6027\u8d28\uff1a \u7ecf\u8fc7\u767d\u5316\u540e\uff0c\u5176\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u8f83\u4f4e\uff1b \u7ecf\u8fc7\u767d\u5316\u540e\uff0c\u6240\u6709\u7279\u5f81\u5177\u6709\u76f8\u540c\u7684\u65b9\u5dee\uff1b \u5728BN\u51fa\u73b0\u4e4b\u524d\uff0c\u4e3b\u8981\u662f\u5229\u7528\u767d\u5316\u64cd\u4f5c\u6765\u7f13\u89e3ICS\u95ee\u9898\uff1a\u4e3b\u8981\u662fPCA\u767d\u5316\u548cZCA\u767d\u5316\u3002 3.2 \u767d\u5316\u64cd\u4f5c\u7684\u7f3a\u70b9 \u8ba1\u7b97\u6210\u672c\u592a\u9ad8\uff1b \u767d\u5316\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u6539\u53d8\u4e86\u7f51\u7edc\u6bcf\u4e00\u5c42\u7684\u5206\u5e03\uff0c\u6240\u4ee5\u5176\u4e5f\u6539\u53d8\u4e86\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\uff1b 4\u3001BN\u7684\u4f5c\u7528\u4e0e\u4f18\u52bf BN\u5c06\u7f51\u7edc\u6bcf\u4e00\u5c42\u8f93\u5165\u6570\u636e\u7684\u5206\u5e03\u56fa\u5b9a\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\uff0c\u4f7f\u4e0a\u5c42\u7f51\u7edc\u4e0d\u9700\u9891\u7e41\u7684\u53bb\u9002\u5e94\u5e95\u5c42\u7f51\u7edc\uff0c\u52a0\u901f\u4e86\u6a21\u578b\u7684\u5b66\u4e60\u901f\u5ea6\uff1b BN\u80fd\u591f\u4f7f\u6bcf\u5c42\u7f51\u7edc\u7684\u8f93\u5165\u843d\u5728\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u7684\u975e\u9971\u548c\u533a\uff0c\u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff1b BN\u5177\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff0c\u7531\u4e8e\u6bcf\u4e2a mini-batch \u7684\u5747\u503c\u4e0e\u65b9\u5dee\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u589e\u52a0\u4e86\u968f\u673a\u566a\u58f0\uff0c\u4f7f\u5176\u5177\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff1b \u7531\u4e8eBN\u64cd\u4f5c\u4e2d\u53ef\u5b66\u4e60\u53c2\u6570 \\gamma \\gamma \u548c \\beta \\beta \u7684\u5b58\u5728\uff0cBN\u7f13\u89e3\u4e86\u4e0a\u8ff0\u6240\u8bf4\u7684\u767d\u5316\u64cd\u4f5c\u7684\u7b2c2\u4e2a\u7f3a\u70b9\uff1b \u7ecf\u8fc7BN\u64cd\u4f5c\u4e4b\u540e\uff0c\u6a21\u578b\u6743\u91cd\u7684\u7f29\u653e\uff08\u6bd4\u5982 W => aW W => aW \uff09\u4f1a\u88ab\u201c\u62b9\u53bb\u201d\uff0c\u8fd9\u4f7f\u6a21\u578b\u5bf9\u7f51\u7edc\u4e2d\u7684\u53c2\u6570\u4e0d\u518d\u8fc7\u5206\u654f\u611f\uff0c\u8bad\u7ec3\u65f6\u66f4\u52a0\u7a33\u5b9a\u3002 Reference https://zhuanlan.zhihu.com/p/34879333 https://www.zhihu.com/question/395811291 https://www.zhihu.com/question/487766088","title":"Batch_Norm"},{"location":"batch_normalize_markdown/#batch-normalize","text":"","title":"Batch Normalize"},{"location":"batch_normalize_markdown/#1bn","text":"\u5176\u64cd\u4f5c\u6b65\u9aa4\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u6bcf\u4e2a mini-batch \u5185\u7684\u7279\u5f81\u901a\u8fc7\u51cf\u53bb \\mu \\mu \u9664\u4ee5 \\sigma \\sigma \u7684\u65b9\u5f0f\u5f52\u4e00\u5316\u5230\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff1b \u5bf9\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u9aa4\u7684\u8f93\u51fa\u518d\u8fc7\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff1b \u4ee5\u4e0a\u662f\u6587\u5b57\u5f62\u5f0f\u7684\u8bf4\u660e\uff0c\u4e0b\u9762\u662f\u516c\u5f0f\u5f62\u5f0f\u3002 \u8f93\u5165 \uff1a \u4e00\u4e2a mini-batch \u5185\u7684\u6570\u636e\u4e3a \\{x_1, x_2, ..., x_m \\} \\{x_1, x_2, ..., x_m \\} \uff0c\u5176\u4e2d m m \u662f mini-batch-size\uff1b \u8bb0 x_i^{(j)} x_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\uff1b \\gamma \\gamma \u548c \\beta \\beta \u4e3a\u53ef\u5b66\u4e60\u7684\u53c2\u6570\uff1b \u8f93\u51fa \uff1a y_i^{(j)} y_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7BN\u540e\u7684\u7ed3\u679c\u3002 \u516c\u5f0f \uff1a \u8be5 mini-batch \u4e2d\u7b2cj\u4e2a\u7279\u5f81\u7684\u5747\u503c\uff1a \\mu_{B}^{(j)} = \\frac{1}{m} \\sum_{i=1}^{m} x_{i}^{(j)} \\mu_{B}^{(j)} = \\frac{1}{m} \\sum_{i=1}^{m} x_{i}^{(j)} \u8be5 mini-batch \u4e2d\u7b2cj\u4e2a\u7279\u5f81\u7684\u65b9\u5dee\uff1a \\sigma_{B}^{(j)2} = \\frac{1}{m} \\sum_{i=1}^{m} (x_i^{(j)} - \\mu_B^{(j)})^2 \\sigma_{B}^{(j)2} = \\frac{1}{m} \\sum_{i=1}^{m} (x_i^{(j)} - \\mu_B^{(j)})^2 \u51cf\u53bb\u5747\u503c\uff0c\u9664\u4e0a\u6807\u51c6\u5316\uff0c \\epsilon \\epsilon \u7528\u4e8e\u907f\u514d\u9664\u6570\u4e3a0\uff1a \\hat{x}_i^{(j)} = \\frac{x_i^{(j)} - \\mu_B^{(j)}}{\\sqrt{\\sigma_B^{(j)2} + \\epsilon}} \\hat{x}_i^{(j)} = \\frac{x_i^{(j)} - \\mu_B^{(j)}}{\\sqrt{\\sigma_B^{(j)2} + \\epsilon}} \u7ecf\u8fc7BN\u540e\u7684\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\uff1a y_i^{(j)} = \\gamma \\hat{x_i^{(j)}} + \\beta y_i^{(j)} = \\gamma \\hat{x_i^{(j)}} + \\beta","title":"1\u3001BN\u5177\u4f53\u7684\u64cd\u4f5c\u6b65\u9aa4"},{"location":"batch_normalize_markdown/#2bn","text":"","title":"2\u3001BN\u662f\u4e3a\u4e86\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898"},{"location":"batch_normalize_markdown/#21-icsinternal-covariate-shift","text":"\u5728\u6df1\u5ea6\u6a21\u578b\u4e2d\uff0c\u968f\u7740\u8bad\u7ec3\u7684\u8fdb\u884c\uff0c\u7f51\u7edc\u4e2d\u7684\u53c2\u6570\u968f\u7740\u68af\u5ea6\u4e0b\u964d\u5728\u4e0d\u65ad\u66f4\u65b0\u3002\u4e00\u65b9\u9762\uff0c\u5f53\u5e95\u5c42\u7f51\u7edc\u4e2d\u53c2\u6570\u53d1\u751f\u5fae\u5f31\u53d8\u5316\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e00\u5c42\u4e2d\u7684\u7ebf\u6027\u53d8\u6362\u4e0e\u975e\u7ebf\u6027\u6fc0\u6d3b\uff0c\u8fd9\u4e9b\u5fae\u5f31\u53d8\u5316\u968f\u7740\u7f51\u7edc\u5c42\u6570\u7684\u52a0\u6df1\u800c\u88ab\u52a0\u5927\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u53c2\u6570\u7684\u53d8\u5316\u5bfc\u81f4\u6bcf\u4e00\u5c42\u7684\u8f93\u5165\u5206\u5e03\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fdb\u800c\u4e0a\u5c42\u7684\u7f51\u7edc\u9700\u8981\u4e0d\u505c\u7684\u53bb\u9002\u5e94\u8fd9\u4e9b\u5206\u5e03\u7684\u53d8\u5316\uff0c\u4f7f\u7684\u6a21\u578b\u8bad\u7ec3\u53d8\u5f97\u56f0\u96be\u3002\u8fd9\u4e00\u73b0\u8c61\u5c31\u662fICS\u95ee\u9898\u3002","title":"2.1 ICS\u95ee\u9898\uff08Internal Covariate Shift\uff09"},{"location":"batch_normalize_markdown/#22-ics","text":"\u7531\u4e8e\u4e0b\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u6570\u636e\u5206\u5e03\u5728\u4e0d\u65ad\u53d8\u5316\uff0c\u4e0a\u5c42\u7f51\u7edc\u5c31\u9700\u8981\u4e0d\u505c\u8c03\u6574\u6765\u9002\u5e94\u8fd9\u4e2a\u53d8\u5316\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5b66\u4e60\u901f\u5ea6\u7684\u964d\u4f4e\uff1b \u968f\u7740\u6a21\u578b\u8bad\u7ec3\u7684\u8fdb\u884c\uff0c\u6a21\u578b\u7684\u53c2\u6570 W W \u4f1a\u53d8\u5927\uff0c\u5219\u6bcf\u5c42\u7684\u8f93\u51fa \\text{Output} = W * \\text{Input} + b \\text{Output} = W * \\text{Input} + b \u4e5f\u4f1a\u53d8\u5927\uff0c\u5f53\u4f7f\u7528\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u65f6\uff0c\u5c31\u5bb9\u6613\u9677\u5165\u68af\u5ea6\u9971\u548c\u533a\uff0c\u6b64\u65f6\u7684\u68af\u5ea6\u5c31\u4f1a\u5f88\u5c0f\u751a\u81f3\u4e8e\u63a5\u8fd10.","title":"2.2 ICS\u4f1a\u5bfc\u81f4\u7684\u95ee\u9898"},{"location":"batch_normalize_markdown/#3bn","text":"","title":"3\u3001\u5728BN\u51fa\u73b0\u524d\uff0c\u662f\u5982\u4f55\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684"},{"location":"batch_normalize_markdown/#31","text":"ICS\u4ea7\u751f\u7684\u539f\u56e0\u662f\u7531\u4e8e\u53c2\u6570\u7684\u66f4\u65b0\u5e26\u6765\u7684\u7f51\u7edc\u4e2d\u6bcf\u4e00\u5c42\u8f93\u5165\u503c\u5206\u5e03\u7684\u6539\u53d8\uff0c\u5e76\u4e14\u968f\u7740\u7f51\u7edc\u7684\u52a0\u6df1\u800c\u8d8a\u4e25\u91cd\u3002\u7f13\u89e3ICS\u6700\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u56fa\u5b9a\u6bcf\u5c42\u7f51\u7edc\u8f93\u5165\u503c\u7684\u5206\u5e03\u6765\u7f13\u89e3ICS\u95ee\u9898\u3002 \u767d\u5316\u64cd\u4f5c\uff1a\u7ecf\u8fc7\u53d8\u5316\u64cd\u4f5c\u4e4b\u540e\u4f1a\u5177\u6709\u5982\u4e0b\u4e24\u4e2a\u6027\u8d28\uff1a \u7ecf\u8fc7\u767d\u5316\u540e\uff0c\u5176\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u8f83\u4f4e\uff1b \u7ecf\u8fc7\u767d\u5316\u540e\uff0c\u6240\u6709\u7279\u5f81\u5177\u6709\u76f8\u540c\u7684\u65b9\u5dee\uff1b \u5728BN\u51fa\u73b0\u4e4b\u524d\uff0c\u4e3b\u8981\u662f\u5229\u7528\u767d\u5316\u64cd\u4f5c\u6765\u7f13\u89e3ICS\u95ee\u9898\uff1a\u4e3b\u8981\u662fPCA\u767d\u5316\u548cZCA\u767d\u5316\u3002","title":"3.1 \u767d\u5316\u64cd\u4f5c"},{"location":"batch_normalize_markdown/#32","text":"\u8ba1\u7b97\u6210\u672c\u592a\u9ad8\uff1b \u767d\u5316\u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u6539\u53d8\u4e86\u7f51\u7edc\u6bcf\u4e00\u5c42\u7684\u5206\u5e03\uff0c\u6240\u4ee5\u5176\u4e5f\u6539\u53d8\u4e86\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\uff1b","title":"3.2 \u767d\u5316\u64cd\u4f5c\u7684\u7f3a\u70b9"},{"location":"batch_normalize_markdown/#4bn","text":"BN\u5c06\u7f51\u7edc\u6bcf\u4e00\u5c42\u8f93\u5165\u6570\u636e\u7684\u5206\u5e03\u56fa\u5b9a\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\uff0c\u4f7f\u4e0a\u5c42\u7f51\u7edc\u4e0d\u9700\u9891\u7e41\u7684\u53bb\u9002\u5e94\u5e95\u5c42\u7f51\u7edc\uff0c\u52a0\u901f\u4e86\u6a21\u578b\u7684\u5b66\u4e60\u901f\u5ea6\uff1b BN\u80fd\u591f\u4f7f\u6bcf\u5c42\u7f51\u7edc\u7684\u8f93\u5165\u843d\u5728\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u7684\u975e\u9971\u548c\u533a\uff0c\u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff1b BN\u5177\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff0c\u7531\u4e8e\u6bcf\u4e2a mini-batch \u7684\u5747\u503c\u4e0e\u65b9\u5dee\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u76f8\u5f53\u4e8e\u589e\u52a0\u4e86\u968f\u673a\u566a\u58f0\uff0c\u4f7f\u5176\u5177\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u6548\u679c\uff1b \u7531\u4e8eBN\u64cd\u4f5c\u4e2d\u53ef\u5b66\u4e60\u53c2\u6570 \\gamma \\gamma \u548c \\beta \\beta \u7684\u5b58\u5728\uff0cBN\u7f13\u89e3\u4e86\u4e0a\u8ff0\u6240\u8bf4\u7684\u767d\u5316\u64cd\u4f5c\u7684\u7b2c2\u4e2a\u7f3a\u70b9\uff1b \u7ecf\u8fc7BN\u64cd\u4f5c\u4e4b\u540e\uff0c\u6a21\u578b\u6743\u91cd\u7684\u7f29\u653e\uff08\u6bd4\u5982 W => aW W => aW \uff09\u4f1a\u88ab\u201c\u62b9\u53bb\u201d\uff0c\u8fd9\u4f7f\u6a21\u578b\u5bf9\u7f51\u7edc\u4e2d\u7684\u53c2\u6570\u4e0d\u518d\u8fc7\u5206\u654f\u611f\uff0c\u8bad\u7ec3\u65f6\u66f4\u52a0\u7a33\u5b9a\u3002","title":"4\u3001BN\u7684\u4f5c\u7528\u4e0e\u4f18\u52bf"},{"location":"batch_normalize_markdown/#reference","text":"https://zhuanlan.zhihu.com/p/34879333 https://www.zhihu.com/question/395811291 https://www.zhihu.com/question/487766088","title":"Reference"},{"location":"layer_normalize_markdown/","text":"Layer Normalize 1\u3001LN\u7684\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4 \u5176\u64cd\u4f5c\u6b65\u9aa4\u53ef\u5206\u4e3a\u4e09\u90e8\u5206\uff1a \u6c42\u6bcf\u6761\u6570\u636e\u5404\u7279\u5f81\u4e4b\u95f4\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff1b \u6bcf\u6761\u6570\u636e\u7684\u6bcf\u4e2a\u7279\u5f81\u51cf\u53bb\u5404\u81ea\u6570\u636e\u7684\u5747\u503c\uff0c\u9664\u4e0a\u5404\u81ea\u6570\u636e\u7684\u6807\u51c6\u5dee\uff1b \u5bf9\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u9aa4\u7684\u8f93\u51fa\u518d\u7ecf\u8fc7\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff1b \u4ee5\u4e0a\u662f\u6587\u5b57\u5f62\u5f0f\u7684\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u516c\u5f0f\u5f62\u5f0f\u3002 \u8f93\u5165 \uff1a \u4e00\u4e2a mini-batch \u7684\u6570\u636e\u5728\u67d0\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u4e3a \\{\\alpha_1, \\alpha_2, ..., \\alpha_m\\} \\{\\alpha_1, \\alpha_2, ..., \\alpha_m\\} \uff0c\u5176\u4e2d m m \u4e3abatch size\uff1b \u8bb0 \\alpha_i^{(j)} \\alpha_i^{(j)} \u4e3a\u8be5mini-batch\u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\uff1b T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\uff0c\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u4e0d\u4e00\u5b9a\u76f8\u540c\uff1b g g \u548c b b \u4e3a\u53ef\u5b66\u4e60\u53c2\u6570\uff1b \u6309\u7167\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u67d0\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u7684shape\u4e3a [m, T] [m, T] \uff0c m m \u4e3abatch-size\uff0c T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u91cf\uff1b \u8f93\u51fa \uff1a y_i^{(j)} y_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7LN\u4e4b\u540e\u7684\u8f93\u51fa\uff1b \u516c\u5f0f \uff1a \u7b2c i i \u6761\u6570\u636e\u5404\u7279\u5f81\u7684\u5747\u503c\uff1a \\mu_i = \\frac{1}{T} \\sum_{j=1}^{T} \\alpha_i^{(j)} \\mu_i = \\frac{1}{T} \\sum_{j=1}^{T} \\alpha_i^{(j)} \u7b2c i i \u6761\u6570\u636e\u5404\u7279\u5f81\u7684\u65b9\u5dee\uff1a \\sigma_i^2 = \\frac{1}{T} \\sum_{j=1}^{T} (\\alpha_i^{(j)} - \\mu_i)^2 \\sigma_i^2 = \\frac{1}{T} \\sum_{j=1}^{T} (\\alpha_i^{(j)} - \\mu_i)^2 \u51cf\u53bb\u5747\u503c\uff0c\u9664\u4e0a\u6807\u51c6\u5316\uff0c \\epsilon \\epsilon \u7528\u4e8e\u907f\u514d\u9664\u6570\u4e3a0\uff1a \\hat{\\alpha_i^{(j)}} = \\frac{\\alpha_i^{(j)} - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \\hat{\\alpha_i^{(j)}} = \\frac{\\alpha_i^{(j)} - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \u7b2c i i \u6761\u6570\u636e\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7LN\u540e\u7684\u7ed3\u679c\uff1a y_i^{(j)} = g \\hat{\\alpha_i^{(j)}} + b y_i^{(j)} = g \\hat{\\alpha_i^{(j)}} + b 2\u3001LN \u4e3a\u4e86\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 \u6df1\u5ea6\u6a21\u578b\u8bad\u7ec3\u65f6\u6240\u9700\u8981\u7684\u8ba1\u7b97\u8d44\u6e90\u975e\u5e38\u5927\uff0c\u60f3\u8981\u51cf\u5c11\u8bad\u7ec3\u6240\u9700\u65f6\u95f4\u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\uff1anormalize the activities of neurons \u589e\u52a0\u8bad\u7ec3\u8fc7\u7a0b\u7684\u7a33\u5b9a\u6027\uff1b 3\u3001LN \u51fa\u73b0\u4e4b\u524d\u662f\u5982\u4f55\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684 LN \u51fa\u73b0\u4e4b\u524d\u901a\u8fc7 BN \u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff1b BN\u7684\u4f18\u70b9\uff1a \u53ef\u4ee5\u89e3\u51b3 \"convariate shift\" \u95ee\u9898\uff0c\u7f29\u77ed\u4e86\u6a21\u578b\u8bad\u7ec3\u6240\u9700\u7684\u65f6\u95f4\uff1b \u80fd\u591f\u4f7f\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u5165\u843d\u5728\u975e\u9971\u548c\u533a\uff0c\u589e\u52a0\u4e86\u8bad\u7ec3\u7684\u7a33\u5b9a\u6027\uff1b BN\u7684\u7f3a\u70b9\uff1a \u5f53 batch size \u7279\u522b\u5c0f\u65f6\uff0c\u8868\u73b0\u4e0d\u597d\uff1b \u5f53\u6bcf\u6761\u6570\u636e\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\u65f6\uff0c\u6bd4\u5982\u6587\u672c\u6570\u636e\uff0c\u6548\u679c\u4e0d\u597d\uff1b \u5728 RNN \u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u4e0d\u597d\uff1b 4\u3001LN \u7684\u4f18\u52bf Normalization \u7684\u4f5c\u7528\uff1a\u964d\u4f4e\u4e86\u5bf9\u53c2\u6570\u521d\u59cb\u5316\u7684\u9700\u6c42\uff0c\u5141\u8bb8\u4f7f\u7528\u66f4\u5927\u7684\u5b66\u4e60\u7387\uff0c\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u4f5c\u7528\u53ef\u6297\u8fc7\u62df\u5408\uff0c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002 \u5047\u8bbe\u67d0\u4e00\u5c42\u8f93\u51fa\u7684\u4e2d\u95f4\u7ed3\u679c\u4e3a [m, T] [m, T] \uff0c m m \u4e3abatch-size\uff0c T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u91cf\uff0c\u90a3\u4e48\uff1a BN \u662f\u5bf9 m m \u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316\uff1b LN \u662f\u5bf9 T T \u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316\uff1b \u4f18\u52bf\uff08\u4ee5\u4e0b\u90fd\u6709\u5f85\u8003\u8bc1\uff09\uff1a \u5728 RNN \u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u8f83\u597d\uff1b \u5728 batch size \u8f83\u5c0f\u7684\u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u8f83\u597d\uff1b LN \u62b9\u6740\u4e86\u4e0d\u540c\u6837\u672c\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u4fdd\u7559\u4e86\u540c\u4e00\u4e2a\u6837\u672c\u5185\u90e8\u7684\u7279\u5f81\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u8fd9\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u4efb\u52a1\u6216NLP\u4efb\u52a1\u6765\u8bf4\u975e\u5e38\u91cd\u8981\uff1b 5\u3001LN\u6548\u679c\u6d4b\u8bd5\u4ee3\u7801 import torch import torch.nn as nn # NLP\u4f8b\u5b50\uff0c\u4e00\u822c\u5728NLP\u4efb\u52a1\u4e2d\uff0c\u5176\u7ef4\u5ea6\u4e3a[batch_size, seq_len, hidden_dim]\uff0cLayerNorm\u64cd\u4f5c\u4ec5\u5bf9\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u505a\u64cd\u4f5c batch, sentence_length, hidden_dim = 20, 5, 10 embedding = torch.randn(batch, sentence_length, hidden_dim) print(\"LayerNorm\u524d, \u5747\u503c: \") mean_result = embedding.mean((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u5747\u503c print([f\"%.2f\" % float(y) for x in mean_result.detach().numpy().tolist() for y in x][:20], \"...\") print(\"LayerNorm\u524d, \u65b9\u5dee: \") var_result = embedding.var((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u65b9\u5dee print([f\"%.2f\" % float(y) for x in var_result.detach().numpy().tolist() for y in x][:20], \"...\") # \u8be5LayerNorm\u5c42\u7684input\u7684\u7ef4\u5ea6\u4e3a[*, hidden_dim]\uff0c\u5176\u4ec5\u5bf9\u521d\u59cb\u5316\u65f6\u7ed9\u5b9a\u7684hidden_dim\u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316 layer_norm = nn.LayerNorm(hidden_dim) embedding = layer_norm(embedding) print(\"LayerNorm\u540e, \u5747\u503c: \") mean_result = embedding.mean((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u5747\u503c print([f\"%.2f\" % float(y) for x in mean_result.detach().numpy().tolist() for y in x][:20], \"...\") print(\"LayerNorm\u540e, \u65b9\u5dee: \") var_result = embedding.var((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u65b9\u5dee print([f\"%.2f\" % float(y) for x in var_result.detach().numpy().tolist() for y in x][:20], \"...\") \u8f93\u51fa\u7ed3\u679c\uff1a LayerNorm\u524d, \u5747\u503c: ['0.23', '0.23', '0.18', '-0.06', '-0.45', '-0.24', '0.34', '0.23', '-0.47', '-0.44', '0.12', '-0.26', '-0.37', '0.33', '-0.50', '0.11', '0.14', '0.37', '-0.12', '0.31'] ... LayerNorm\u524d, \u65b9\u5dee: ['1.34', '0.51', '1.16', '0.90', '0.17', '0.50', '0.56', '0.61', '0.70', '1.06', '0.85', '1.26', '1.34', '1.45', '1.52', '0.75', '0.63', '1.37', '1.34', '1.51'] ... LayerNorm\u540e, \u5747\u503c: ['0.00', '-0.00', '-0.00', '0.00', '0.00', '-0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '-0.00', '0.00', '0.00', '-0.00', '-0.00', '-0.00', '0.00'] ... LayerNorm\u540e, \u65b9\u5dee: ['1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11'] ... \u53ef\u4ee5\u770b\u51fa\uff0c\u7ecf\u8fc7\u5f52\u4e00\u5316\u4e4b\u540e\uff0c\u5176\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1.11\uff08\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f1.11\uff0c\u800c\u4e0d\u662f1\uff0c\u8fd8\u6ca1\u641e\u6e05\u695a\uff09\uff1b","title":"Layer_Norm"},{"location":"layer_normalize_markdown/#layer-normalize","text":"","title":"Layer Normalize"},{"location":"layer_normalize_markdown/#1ln","text":"\u5176\u64cd\u4f5c\u6b65\u9aa4\u53ef\u5206\u4e3a\u4e09\u90e8\u5206\uff1a \u6c42\u6bcf\u6761\u6570\u636e\u5404\u7279\u5f81\u4e4b\u95f4\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\uff1b \u6bcf\u6761\u6570\u636e\u7684\u6bcf\u4e2a\u7279\u5f81\u51cf\u53bb\u5404\u81ea\u6570\u636e\u7684\u5747\u503c\uff0c\u9664\u4e0a\u5404\u81ea\u6570\u636e\u7684\u6807\u51c6\u5dee\uff1b \u5bf9\u7ecf\u8fc7\u4e0a\u4e00\u6b65\u9aa4\u7684\u8f93\u51fa\u518d\u7ecf\u8fc7\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff1b \u4ee5\u4e0a\u662f\u6587\u5b57\u5f62\u5f0f\u7684\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u516c\u5f0f\u5f62\u5f0f\u3002 \u8f93\u5165 \uff1a \u4e00\u4e2a mini-batch \u7684\u6570\u636e\u5728\u67d0\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u4e3a \\{\\alpha_1, \\alpha_2, ..., \\alpha_m\\} \\{\\alpha_1, \\alpha_2, ..., \\alpha_m\\} \uff0c\u5176\u4e2d m m \u4e3abatch size\uff1b \u8bb0 \\alpha_i^{(j)} \\alpha_i^{(j)} \u4e3a\u8be5mini-batch\u4e2d\u7b2c i i \u6761\u6570\u636e\u7684\u7b2c j j \u4e2a\u7279\u5f81\uff1b T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\uff0c\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u4e0d\u4e00\u5b9a\u76f8\u540c\uff1b g g \u548c b b \u4e3a\u53ef\u5b66\u4e60\u53c2\u6570\uff1b \u6309\u7167\u4e0a\u8ff0\u5b9a\u4e49\uff0c\u67d0\u5c42\u7f51\u7edc\u7684\u8f93\u51fa\u7684shape\u4e3a [m, T] [m, T] \uff0c m m \u4e3abatch-size\uff0c T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u91cf\uff1b \u8f93\u51fa \uff1a y_i^{(j)} y_i^{(j)} \u4e3a\u8be5 mini-batch \u4e2d\u7b2c i i \u6761\u6570\u636e\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7LN\u4e4b\u540e\u7684\u8f93\u51fa\uff1b \u516c\u5f0f \uff1a \u7b2c i i \u6761\u6570\u636e\u5404\u7279\u5f81\u7684\u5747\u503c\uff1a \\mu_i = \\frac{1}{T} \\sum_{j=1}^{T} \\alpha_i^{(j)} \\mu_i = \\frac{1}{T} \\sum_{j=1}^{T} \\alpha_i^{(j)} \u7b2c i i \u6761\u6570\u636e\u5404\u7279\u5f81\u7684\u65b9\u5dee\uff1a \\sigma_i^2 = \\frac{1}{T} \\sum_{j=1}^{T} (\\alpha_i^{(j)} - \\mu_i)^2 \\sigma_i^2 = \\frac{1}{T} \\sum_{j=1}^{T} (\\alpha_i^{(j)} - \\mu_i)^2 \u51cf\u53bb\u5747\u503c\uff0c\u9664\u4e0a\u6807\u51c6\u5316\uff0c \\epsilon \\epsilon \u7528\u4e8e\u907f\u514d\u9664\u6570\u4e3a0\uff1a \\hat{\\alpha_i^{(j)}} = \\frac{\\alpha_i^{(j)} - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \\hat{\\alpha_i^{(j)}} = \\frac{\\alpha_i^{(j)} - \\mu_i}{\\sqrt{\\sigma_i^2 + \\epsilon}} \u7b2c i i \u6761\u6570\u636e\u7b2c j j \u4e2a\u7279\u5f81\u7ecf\u8fc7LN\u540e\u7684\u7ed3\u679c\uff1a y_i^{(j)} = g \\hat{\\alpha_i^{(j)}} + b y_i^{(j)} = g \\hat{\\alpha_i^{(j)}} + b","title":"1\u3001LN\u7684\u5177\u4f53\u64cd\u4f5c\u6b65\u9aa4"},{"location":"layer_normalize_markdown/#2ln","text":"\u6df1\u5ea6\u6a21\u578b\u8bad\u7ec3\u65f6\u6240\u9700\u8981\u7684\u8ba1\u7b97\u8d44\u6e90\u975e\u5e38\u5927\uff0c\u60f3\u8981\u51cf\u5c11\u8bad\u7ec3\u6240\u9700\u65f6\u95f4\u7684\u4e00\u4e2a\u65b9\u6cd5\u662f\uff1anormalize the activities of neurons \u589e\u52a0\u8bad\u7ec3\u8fc7\u7a0b\u7684\u7a33\u5b9a\u6027\uff1b","title":"2\u3001LN \u4e3a\u4e86\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898"},{"location":"layer_normalize_markdown/#3ln","text":"LN \u51fa\u73b0\u4e4b\u524d\u901a\u8fc7 BN \u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff1b BN\u7684\u4f18\u70b9\uff1a \u53ef\u4ee5\u89e3\u51b3 \"convariate shift\" \u95ee\u9898\uff0c\u7f29\u77ed\u4e86\u6a21\u578b\u8bad\u7ec3\u6240\u9700\u7684\u65f6\u95f4\uff1b \u80fd\u591f\u4f7f\u9971\u548c\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u5165\u843d\u5728\u975e\u9971\u548c\u533a\uff0c\u589e\u52a0\u4e86\u8bad\u7ec3\u7684\u7a33\u5b9a\u6027\uff1b BN\u7684\u7f3a\u70b9\uff1a \u5f53 batch size \u7279\u522b\u5c0f\u65f6\uff0c\u8868\u73b0\u4e0d\u597d\uff1b \u5f53\u6bcf\u6761\u6570\u636e\u7684\u957f\u5ea6\u4e0d\u4e00\u81f4\u65f6\uff0c\u6bd4\u5982\u6587\u672c\u6570\u636e\uff0c\u6548\u679c\u4e0d\u597d\uff1b \u5728 RNN \u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u4e0d\u597d\uff1b","title":"3\u3001LN \u51fa\u73b0\u4e4b\u524d\u662f\u5982\u4f55\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684"},{"location":"layer_normalize_markdown/#4ln","text":"Normalization \u7684\u4f5c\u7528\uff1a\u964d\u4f4e\u4e86\u5bf9\u53c2\u6570\u521d\u59cb\u5316\u7684\u9700\u6c42\uff0c\u5141\u8bb8\u4f7f\u7528\u66f4\u5927\u7684\u5b66\u4e60\u7387\uff0c\u6709\u4e00\u5b9a\u7684\u6b63\u5219\u5316\u4f5c\u7528\u53ef\u6297\u8fc7\u62df\u5408\uff0c\u4f7f\u8bad\u7ec3\u66f4\u52a0\u7a33\u5b9a\u3002 \u5047\u8bbe\u67d0\u4e00\u5c42\u8f93\u51fa\u7684\u4e2d\u95f4\u7ed3\u679c\u4e3a [m, T] [m, T] \uff0c m m \u4e3abatch-size\uff0c T T \u4e3a\u6bcf\u6761\u6570\u636e\u7684\u7279\u5f81\u6570\u91cf\uff0c\u90a3\u4e48\uff1a BN \u662f\u5bf9 m m \u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316\uff1b LN \u662f\u5bf9 T T \u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316\uff1b \u4f18\u52bf\uff08\u4ee5\u4e0b\u90fd\u6709\u5f85\u8003\u8bc1\uff09\uff1a \u5728 RNN \u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u8f83\u597d\uff1b \u5728 batch size \u8f83\u5c0f\u7684\u7f51\u7edc\u4e2d\uff0c\u8868\u73b0\u8f83\u597d\uff1b LN \u62b9\u6740\u4e86\u4e0d\u540c\u6837\u672c\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u4fdd\u7559\u4e86\u540c\u4e00\u4e2a\u6837\u672c\u5185\u90e8\u7684\u7279\u5f81\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u8fd9\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u4efb\u52a1\u6216NLP\u4efb\u52a1\u6765\u8bf4\u975e\u5e38\u91cd\u8981\uff1b","title":"4\u3001LN \u7684\u4f18\u52bf"},{"location":"layer_normalize_markdown/#5ln","text":"import torch import torch.nn as nn # NLP\u4f8b\u5b50\uff0c\u4e00\u822c\u5728NLP\u4efb\u52a1\u4e2d\uff0c\u5176\u7ef4\u5ea6\u4e3a[batch_size, seq_len, hidden_dim]\uff0cLayerNorm\u64cd\u4f5c\u4ec5\u5bf9\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u505a\u64cd\u4f5c batch, sentence_length, hidden_dim = 20, 5, 10 embedding = torch.randn(batch, sentence_length, hidden_dim) print(\"LayerNorm\u524d, \u5747\u503c: \") mean_result = embedding.mean((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u5747\u503c print([f\"%.2f\" % float(y) for x in mean_result.detach().numpy().tolist() for y in x][:20], \"...\") print(\"LayerNorm\u524d, \u65b9\u5dee: \") var_result = embedding.var((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u65b9\u5dee print([f\"%.2f\" % float(y) for x in var_result.detach().numpy().tolist() for y in x][:20], \"...\") # \u8be5LayerNorm\u5c42\u7684input\u7684\u7ef4\u5ea6\u4e3a[*, hidden_dim]\uff0c\u5176\u4ec5\u5bf9\u521d\u59cb\u5316\u65f6\u7ed9\u5b9a\u7684hidden_dim\u8fd9\u4e2a\u7ef4\u5ea6\u505a\u5f52\u4e00\u5316 layer_norm = nn.LayerNorm(hidden_dim) embedding = layer_norm(embedding) print(\"LayerNorm\u540e, \u5747\u503c: \") mean_result = embedding.mean((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u5747\u503c print([f\"%.2f\" % float(y) for x in mean_result.detach().numpy().tolist() for y in x][:20], \"...\") print(\"LayerNorm\u540e, \u65b9\u5dee: \") var_result = embedding.var((-1)) # \u8ba1\u7b97\u7ef4\u5ea6 hidden_dim \u7684\u65b9\u5dee print([f\"%.2f\" % float(y) for x in var_result.detach().numpy().tolist() for y in x][:20], \"...\") \u8f93\u51fa\u7ed3\u679c\uff1a LayerNorm\u524d, \u5747\u503c: ['0.23', '0.23', '0.18', '-0.06', '-0.45', '-0.24', '0.34', '0.23', '-0.47', '-0.44', '0.12', '-0.26', '-0.37', '0.33', '-0.50', '0.11', '0.14', '0.37', '-0.12', '0.31'] ... LayerNorm\u524d, \u65b9\u5dee: ['1.34', '0.51', '1.16', '0.90', '0.17', '0.50', '0.56', '0.61', '0.70', '1.06', '0.85', '1.26', '1.34', '1.45', '1.52', '0.75', '0.63', '1.37', '1.34', '1.51'] ... LayerNorm\u540e, \u5747\u503c: ['0.00', '-0.00', '-0.00', '0.00', '0.00', '-0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '-0.00', '0.00', '0.00', '-0.00', '-0.00', '-0.00', '0.00'] ... LayerNorm\u540e, \u65b9\u5dee: ['1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11', '1.11'] ... \u53ef\u4ee5\u770b\u51fa\uff0c\u7ecf\u8fc7\u5f52\u4e00\u5316\u4e4b\u540e\uff0c\u5176\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a1.11\uff08\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u662f1.11\uff0c\u800c\u4e0d\u662f1\uff0c\u8fd8\u6ca1\u641e\u6e05\u695a\uff09\uff1b","title":"5\u3001LN\u6548\u679c\u6d4b\u8bd5\u4ee3\u7801"},{"location":"sklearn%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%B9%B3%E8%A1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9D%83%E9%87%8D/","text":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd \u51fd\u6570 sklearn.utils.class_weight.compute_class_weight \u53ef\u4ee5\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u5c11\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5927\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u591a\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5c0f\u7684\u6743\u91cd\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import numpy as np from sklearn.utils.class_weight import compute_class_weight def calculate_class_weights(data_list): labels = [] for data in data_list: for label in data[\"labels\"]: labels.append(label) class_weight_result = compute_class_weight('balanced', np.unique(labels), np.array(labels)) label2weight = {} for label, weight in zip(np.unique(labels), class_weight_result): label2weight[label] = weight return label2weight def test_calculate_class_weights(): data_list = [ {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u4f53\u80b2\", ]}, ] label2weight = calculate_class_weights(data_list) for label, weight in label2weight.items(): print(label, weight) if __name__ == \"__main__\": test_calculate_class_weights() \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u4ed9\u4fa0 0.75 \u4f53\u80b2 3.0 \u7535\u5f71 0.75","title":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd"},{"location":"sklearn%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%B9%B3%E8%A1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9D%83%E9%87%8D/#sklearn","text":"\u51fd\u6570 sklearn.utils.class_weight.compute_class_weight \u53ef\u4ee5\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u5c11\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5927\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u591a\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5c0f\u7684\u6743\u91cd\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import numpy as np from sklearn.utils.class_weight import compute_class_weight def calculate_class_weights(data_list): labels = [] for data in data_list: for label in data[\"labels\"]: labels.append(label) class_weight_result = compute_class_weight('balanced', np.unique(labels), np.array(labels)) label2weight = {} for label, weight in zip(np.unique(labels), class_weight_result): label2weight[label] = weight return label2weight def test_calculate_class_weights(): data_list = [ {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u4f53\u80b2\", ]}, ] label2weight = calculate_class_weights(data_list) for label, weight in label2weight.items(): print(label, weight) if __name__ == \"__main__\": test_calculate_class_weights() \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u4ed9\u4fa0 0.75 \u4f53\u80b2 3.0 \u7535\u5f71 0.75","title":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd"},{"location":"%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/","text":"\u51e0\u4e2a\u5e38\u89c1\u7684\u51fd\u6570\u66f2\u7ebf \u6307\u6570\u548c\u5e42 \u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np x = list(range(11)) # 2\u6b21\u65b9 y_2 = [pow(item, 2) for item in x] plt.plot(x, y_2, label=\"pow-2\") # 3\u6b21\u65b9 y_3 = [pow(item, 3) for item in x] plt.plot(x, y_3, label=\"pow-3\") # 4\u6b21\u65b9 y_4 = [pow(item, 4) for item in x] plt.plot(x, y_4, label=\"pow-4\") # \u6307\u6570\u5e42 z = [np.exp(item) for item in x] z = plt.plot(x, z, label=\"exp\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a \u5bf9\u6570\u548c\u5f00\u65b9 \u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np x = list(range(100000)) # \u5f002\u6b21\u65b9\u6839 y_2 = [pow(item, 1/2) for item in x] plt.plot(x, y_2, label=\"sqrt-2\") # \u5f003\u6b21\u65b9\u6839 y_3 = [pow(item, 1/3) for item in x] plt.plot(x, y_3, label=\"sqrt-3\") # \u5f004\u6b21\u65b9\u6839 y_4 = [pow(item, 1/4) for item in x] plt.plot(x, y_4, label=\"sqrt-4\") # \u53d6\u5bf9\u6570 z = [np.log(item) if item >= 1 else 0 for item in x] z = plt.plot(x, z, label=\"log\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a Sigmoid \u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np def sigmoid(x): sig = 1 / (1 + np.exp(-x)) return sig x = np.arange(-10, 10, step=0.1) z = [sigmoid(item) for item in x] z = plt.plot(x, z, label=\"sigmoid\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a","title":"\u51e0\u4e2a\u5e38\u89c1\u7684\u51fd\u6570\u66f2\u7ebf"},{"location":"%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/#_1","text":"","title":"\u51e0\u4e2a\u5e38\u89c1\u7684\u51fd\u6570\u66f2\u7ebf"},{"location":"%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/#_2","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np x = list(range(11)) # 2\u6b21\u65b9 y_2 = [pow(item, 2) for item in x] plt.plot(x, y_2, label=\"pow-2\") # 3\u6b21\u65b9 y_3 = [pow(item, 3) for item in x] plt.plot(x, y_3, label=\"pow-3\") # 4\u6b21\u65b9 y_4 = [pow(item, 4) for item in x] plt.plot(x, y_4, label=\"pow-4\") # \u6307\u6570\u5e42 z = [np.exp(item) for item in x] z = plt.plot(x, z, label=\"exp\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a","title":"\u6307\u6570\u548c\u5e42"},{"location":"%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/#_3","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np x = list(range(100000)) # \u5f002\u6b21\u65b9\u6839 y_2 = [pow(item, 1/2) for item in x] plt.plot(x, y_2, label=\"sqrt-2\") # \u5f003\u6b21\u65b9\u6839 y_3 = [pow(item, 1/3) for item in x] plt.plot(x, y_3, label=\"sqrt-3\") # \u5f004\u6b21\u65b9\u6839 y_4 = [pow(item, 1/4) for item in x] plt.plot(x, y_4, label=\"sqrt-4\") # \u53d6\u5bf9\u6570 z = [np.log(item) if item >= 1 else 0 for item in x] z = plt.plot(x, z, label=\"log\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a","title":"\u5bf9\u6570\u548c\u5f00\u65b9"},{"location":"%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF/#sigmoid","text":"\u4ee3\u7801\u5982\u4e0b\uff1a import matplotlib.pyplot as plt import numpy as np def sigmoid(x): sig = 1 / (1 + np.exp(-x)) return sig x = np.arange(-10, 10, step=0.1) z = [sigmoid(item) for item in x] z = plt.plot(x, z, label=\"sigmoid\") plt.legend() plt.show() \u56fe\u50cf\u5982\u4e0b\uff1a","title":"Sigmoid"}]}