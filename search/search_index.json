{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u76ee\u5f55 \u00b6 1\u3001NLP\u5de5\u7a0b \u00b6 sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd","title":"Home"},{"location":"#_1","text":"","title":"\u76ee\u5f55"},{"location":"#1nlp","text":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd","title":"1\u3001NLP\u5de5\u7a0b"},{"location":"NLP%E5%B7%A5%E7%A8%8B/sklearn%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%B9%B3%E8%A1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9D%83%E9%87%8D/","text":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd \u00b6 \u51fd\u6570 sklearn.utils.class_weight.compute_class_weight \u53ef\u4ee5\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u5c11\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5927\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u591a\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5c0f\u7684\u6743\u91cd\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import numpy as np from sklearn.utils.class_weight import compute_class_weight def calculate_class_weights(data_list): labels = [] for data in data_list: for label in data[\"labels\"]: labels.append(label) class_weight_result = compute_class_weight('balanced', np.unique(labels), np.array(labels)) label2weight = {} for label, weight in zip(np.unique(labels), class_weight_result): label2weight[label] = weight return label2weight def test_calculate_class_weights(): data_list = [ {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u4f53\u80b2\", ]}, ] label2weight = calculate_class_weights(data_list) for label, weight in label2weight.items(): print(label, weight) if __name__ == \"__main__\": test_calculate_class_weights() \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u4ed9\u4fa0 0.75 \u4f53\u80b2 3.0 \u7535\u5f71 0.75","title":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd"},{"location":"NLP%E5%B7%A5%E7%A8%8B/sklearn%E8%AE%A1%E7%AE%97%E4%B8%8D%E5%B9%B3%E8%A1%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9D%83%E9%87%8D/#sklearn","text":"\u51fd\u6570 sklearn.utils.class_weight.compute_class_weight \u53ef\u4ee5\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u5c11\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5927\u7684\u6743\u91cd\uff0c\u7ed9\u6570\u636e\u91cf\u8f83\u591a\u7684\u7c7b\u522b\u4e00\u4e2a\u8f83\u5c0f\u7684\u6743\u91cd\u3002 \u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import numpy as np from sklearn.utils.class_weight import compute_class_weight def calculate_class_weights(data_list): labels = [] for data in data_list: for label in data[\"labels\"]: labels.append(label) class_weight_result = compute_class_weight('balanced', np.unique(labels), np.array(labels)) label2weight = {} for label, weight in zip(np.unique(labels), class_weight_result): label2weight[label] = weight return label2weight def test_calculate_class_weights(): data_list = [ {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u7535\u5f71\", \"\u4ed9\u4fa0\"]}, {\"content\": \"\u8fd9\u91cc\u662f\u6587\u672c\", \"labels\": [\"\u4f53\u80b2\", ]}, ] label2weight = calculate_class_weights(data_list) for label, weight in label2weight.items(): print(label, weight) if __name__ == \"__main__\": test_calculate_class_weights() \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u4ed9\u4fa0 0.75 \u4f53\u80b2 3.0 \u7535\u5f71 0.75","title":"sklearn\u8ba1\u7b97\u4e0d\u5e73\u8861\u6570\u636e\u7684\u6743\u91cd"}]}